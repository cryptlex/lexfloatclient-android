plugins {
	id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }

    namespace 'com.cryptlex.android.lexfloatclient'
}

dependencies {
    implementation 'net.java.dev.jna:jna:5.8.0'
}

publishing {
    publications {
        release(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION
            afterEvaluate {
                from components.release
                pom {
					name = 'LexFloatClient'
					description = 'LexFloatClient wrapper for Android (licensing library).'
					url = 'https://github.com/cryptlex/lexfloatclient-android'
					licenses {
						license {
							name = 'MIT License'
							url = 'http://www.opensource.org/licenses/mit-license.php'
						}
					}
					organization {
						name = 'Cryptlex, LLC'
						url = 'https://cryptlex.com'
					}
					developers {
						developer {
							name = 'Cryptlex Team'
							email = 'support@cryptlex.com'
							organization = 'Cryptlex, LLC.'
							organizationUrl = 'https://cryptlex.com'
						}
					}
					scm {
						connection = 'scm:git:https://github.com/cryptlex/lexfloatclient-android.git'
						developerConnection = 'scm:git:ssh://github.com/cryptlex/lexfloatclient-android.git'
						url = 'https://github.com/cryptlex/lexfloatclient-android'
					}
			    }
            }
        }

        test(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION
            afterEvaluate {
                from components.release
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.release
}
